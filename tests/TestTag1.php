<?php
/**
 * Created by PhpStorm.
 * User: gorden
 * Date: 19-2-18
 * Time: 下午2:43
 */

namespace W7\Laravel\CacheModel\Tests;


use W7\Laravel\CacheModel\Cache;
use W7\Laravel\CacheModel\CacheResolver;
use W7\Laravel\CacheModel\Tag;

class TestTag1 extends TestCase
{
	public function setUp()
	{
		parent::setUp(); // TODO: Change the autogenerated stub
		
		CacheResolver::setCacheResolver(\Illuminate\Support\Facades\Cache::store());
	}
	
	public function testJoinPiece()
	{
		//		$pieces = ['a', 'b', 'c', 'd', 'e'];
		//		$i      = 1;
		//		while ($i < 18) {
		//			ll(Tag::joinPieces($pieces, $i));
		//			$i++;
		//		}
	}
	
	private function md5($content)
	{
		static $i = 0;
		$i++;
		return "({$content}{$i})";
	}
	
	public function testPreNamespace($namespace = 'a:b:c:d:e')
	{
		$cache = CacheResolver::getCacheResolver();
		
		$pieces = explode(':', $namespace);
		$length = count($pieces);
		
		for ($i = 0; $i < $length; $i++) {
			if ($i == 0) {
				$key   = Tag::joinPieces($pieces, 1);
				$value = $cache->get($key);
				if (empty($value)) {
					$value = $this->md5($key);
					$cache->set($key, $value, 1000);
				}
			} else {
				$key   = Tag::joinPieces($pieces, $i + 1);
				$value = $cache->get($key);
				if (empty($value)) {
					// 'a'
					$parent_key = Tag::joinPieces($pieces, $i);
					// 'a' => value
					$parent_value = $cache->get($parent_key);
					// 'b'
					$suffix = $pieces[$i];
					
					$value = $this->md5($parent_value . ':' . $suffix);
					$cache->set($key, $value, 1000);
				}
			}
		}
	}
	
	public function testFlushNamespace($namespace = 'a:b:c:d')
	{
		$cache = CacheResolver::getCacheResolver();
		
		$pieces = explode(':', $namespace);
		$length = count($pieces);
		
		$key = Tag::joinPieces($pieces, $length);
		$cache->delete($key);
		
		for ($i = 0; $i < $length; $i++) {
			if ($i == 0) {
				$key   = Tag::joinPieces($pieces, 1);
				$value = $cache->get($key);
				if (empty($value)) {
					$value = $this->md5($key);
					$cache->set($key, $value, 1000);
				}
			} else {
				$key   = Tag::joinPieces($pieces, $i + 1);
				$value = $cache->get($key);
				if (empty($value)) {
					// 'a'
					$parent_key = Tag::joinPieces($pieces, $i);
					// 'a' => value
					$parent_value = $cache->get($parent_key);
					// 'b'
					$suffix = $pieces[$i];
					
					$value = $this->md5($parent_value . ':' . $suffix);
					$cache->set($key, $value, 1000);
				}
			}
		}
		jd($pieces);
	}
}